#!/bin/sh
set -e
cd "$(dirname "$0")"

#
# This script supports start, stop, save, and restore commands.
#

source iptables.conf

# Save and Restore arguments handled here
if [ "$1" = "save" ]; then
    echo "Saving firewall ..."
    $IPTS
    exit 0
elif [ "$1" = "restore" ]; then
    echo "Restoring firewall ..."
    $IPTR
    exit 0
fi

# Configuration warnings
if [ "$GATEWAY" = "true" ] && [ "$DOCKER_NET" != "" ]; then
    echo "This script does not support configuring Docker rules on a gateway."
    exit 1
fi

if [ "$GATEWAY" = "true" ]; then
    if [ "$INET_IFACE" = "" ] || [ "$LOCAL_IFACE" = "" ]; then
        echo "You need to configure an internet and local interface for gateway configuration."
        exit 1
    fi
fi

# Kernel parameters
if [ "$KERNEL_PARAMS" = "true" ]; then
    echo "Setting kernel parameters ..."
    source ./util/kernel_params.sh
fi

echo "Flushing Tables ..."
source ./util/flush.sh

# Stop argument handled here
if [ "$1" = "stop" ]; then
    if [ "$DOCKER_NET" != "" ]; then
        echo "Restarting docker service ..."
        $DOCKER_RESTART
    fi
    echo "Firewall completely flushed! Now running with no firewall."
    exit 0
fi

###############################################################################
#
# Default Policies
#

echo "Setting default policies ..."

$IPT -P INPUT DROP
$IPT -P FORWARD DROP
$IPT -P OUTPUT DROP

###############################################################################
#
# Custom Chains
#

echo "Create and populate custom rule chains ..."

# Create a chain to filter INVALID packets
$IPT -N bad_packets
source ./chains/bad_packets.sh
$IPT -A bad_packets -j RETURN

# Create another chain to filter bad tcp packets
$IPT -N bad_tcp_packets
source ./chains/bad_tcp_packets.sh
$IPT -A bad_tcp_packets -j RETURN

# ICMP
$IPT -N icmp_packets
source ./chains/icmp_packets.sh
$IPT -A icmp_packets -j RETURN

# TCP (incoming and outgoing)
$IPT -N tcp_inbound
source ./chains/tcp_inbound.sh
$IPT -A tcp_inbound -j RETURN

$IPT -N tcp_outbound
source ./chains/tcp_outbound.sh
$IPT -A tcp_outbound -j $TCP_OUTBOUND

# UDP (incoming and outgoing)
$IPT -N udp_inbound
source ./chains/udp_inbound.sh
$IPT -A udp_inbound -j RETURN

$IPT -N udp_outbound
source ./chains/udp_outbound.sh
$IPT -A udp_outbound -j $UDP_OUTBOUND

# Utility chain for blocking outbound traffic destined for private IPs
$IPT -N private_outbound
source ./chains/private_outbound.sh
$IPT -A private_outbound -j RETURN

# DOCKER-USER
if [ "$DOCKER_NET" != "" ]; then
    $IPT -N DOCKER-USER
    source ./chains/docker_user.sh
fi

###############################################################################
#
# INPUT Chain
#

echo "Process INPUT chain ..."

# Allow all on localhost interface
$IPT -A INPUT -p ALL -i $LO_IFACE -j ACCEPT

# Drop bad packets
$IPT -A INPUT -p ALL -j bad_packets

# Some DOCSIS compliant cable modems send IGMP multicasts to find connected PCs.
# The multicast packets have the destination address 224.0.0.1.
if [ "$DROP_IGMP_MULTICAST" = "true" ]; then
    $IPT -A INPUT -p ALL -d 224.0.0.1 -j DROP
fi

if [ "$INET_IFACE" != "" ]; then
    # Accept established connections
    $IPT -A INPUT -p ALL -i $INET_IFACE -m state --state ESTABLISHED,RELATED -j ACCEPT

    # Allow/filter ICMP traffic from internet
    if [ "$INET_ICMP" = "allow" ]; then
        $IPT -A INPUT -p ICMP -i $INET_IFACE -j ACCEPT
    elif [ "$INET_ICMP" = "firewall" ]; then
        $IPT -A INPUT -p ICMP -i $INET_IFACE -j icmp_packets
    fi

    # Allow/filter TCP traffic from internet
    if [ "$INET_TCP" = "allow" ]; then
        $IPT -A INPUT -p TCP -i $INET_IFACE -j ACCEPT
    elif [ "$INET_TCP" = "firewall" ]; then
        $IPT -A INPUT -p TCP -i $INET_IFACE -j tcp_inbound
    fi

    # Allow/filter UDP traffic from internet
    if [ "$INET_UDP" = "allow" ]; then
        $IPT -A INPUT -p UDP -i $INET_IFACE -j ACCEPT
    elif [ "$INET_UDP" = "firewall" ]; then
        $IPT -A INPUT -p UDP -i $INET_IFACE -j udp_inbound
    fi
fi

if [ "$LOCAL_IFACE" != "" ]; then
    # Accept established connections
    $IPT -A INPUT -p ALL -i $LOCAL_IFACE -m state --state ESTABLISHED,RELATED -j ACCEPT

    # Allow/filter ICMP traffic from local network
    if [ "$LOCAL_ICMP" = "allow" ]; then
        $IPT -A INPUT -p ICMP -i $LOCAL_IFACE -s $LOCAL_NET -j ACCEPT
        $IPT -A INPUT -p ICMP -i $LOCAL_IFACE -d $LOCAL_BCAST -j ACCEPT
    elif [ "$LOCAL_ICMP" = "firewall" ]; then
        $IPT -A INPUT -p ICMP -i $LOCAL_IFACE -s $LOCAL_NET -j icmp_packets
        $IPT -A INPUT -p ICMP -i $LOCAL_IFACE -d $LOCAL_BCAST -j icmp_packets
    fi

    # Allow/filter TCP traffic from local network
    if [ "$LOCAL_TCP" = "allow" ]; then
        $IPT -A INPUT -p TCP -i $LOCAL_IFACE -s $LOCAL_NET -j ACCEPT
        $IPT -A INPUT -p TCP -i $LOCAL_IFACE -d $LOCAL_BCAST -j ACCEPT
    elif [ "$LOCAL_TCP" = "firewall" ]; then
        $IPT -A INPUT -p TCP -i $LOCAL_IFACE -s $LOCAL_NET -j tcp_inbound
        $IPT -A INPUT -p TCP -i $LOCAL_IFACE -d $LOCAL_BCAST -j tcp_inbound
    fi

    # Allow/filter UDP traffic from local network
    if [ "$LOCAL_UDP" = "allow" ]; then
        $IPT -A INPUT -p UDP -i $LOCAL_IFACE -s $LOCAL_NET -j ACCEPT
        $IPT -A INPUT -p UDP -i $LOCAL_IFACE -d $LOCAL_BCAST -j ACCEPT
    elif [ "$LOCAL_UDP" = "firewall" ]; then
        $IPT -A INPUT -p UDP -i $LOCAL_IFACE -s $LOCAL_NET -j udp_inbound
        $IPT -A INPUT -p UDP -i $LOCAL_IFACE -d $LOCAL_BCAST -j udp_inbound
    fi
fi

# Drop without logging broadcasts that get this far.
$IPT -A INPUT -m pkttype --pkt-type broadcast -j DROP

# Log packets that still don't match
if [ "$LOG_DROPS" = "true" ]; then
    $IPT -A INPUT -m limit --limit 3/minute --limit-burst 3 -j LOG --log-prefix "INPUT packet died: "
fi

###############################################################################
#
# FORWARD Chain
#

if [ "$GATEWAY" = "true" ]; then
    echo "Process FORWARD chain ..."

    # Drop bad packets
    $IPT -A FORWARD -p ALL -j bad_packets

    # Accept responses from the internet
    $IPT -A FORWARD -i $INET_IFACE -m state --state ESTABLISHED,RELATED -j ACCEPT

    # Block outbound traffic to private IPs
    if [ "$DROP_PRIVATE_OUTBOUND" = "true" ]; then
        $IPT -A OUTPUT -p ALL -o $INET_IFACE -j private_outbound
    fi

    # Accept UDP and TCP packets we want to forward from internal sources
    $IPT -A FORWARD -p TCP -i $LOCAL_IFACE -j tcp_outbound
    $IPT -A FORWARD -p UDP -i $LOCAL_IFACE -j udp_outbound

    # If not blocked, accept any other packets from the internal interface
    $IPT -A FORWARD -p ALL -i $LOCAL_IFACE -j ACCEPT

    # Log packets that still don't match
    if [ "$LOG_DROPS" = "true" ]; then
        $IPT -A FORWARD -m limit --limit 3/minute --limit-burst 3 -j LOG --log-prefix "FORWARD packet died: "
    fi
fi

###############################################################################
#
# OUTPUT Chain
#

echo "Process OUTPUT chain ..."

# Drop invalid outbound icmp packets
$IPT -A OUTPUT -m state -p ICMP --state INVALID -j DROP

# Trust localhost
$IPT -A OUTPUT -p ALL -o $LO_IFACE -j ACCEPT
$IPT -A OUTPUT -p ALL -s $LO_IP -j ACCEPT

# Filter packets with oubound rules
if [ "$INET_IFACE" != "" ]; then
    if [ "$DROP_PRIVATE_OUTBOUND" = "true" ]; then
        $IPT -A OUTPUT -p ALL -o $INET_IFACE -j private_outbound
    fi
    $IPT -A OUTPUT -p TCP -o $INET_IFACE -j tcp_outbound
    $IPT -A OUTPUT -p UDP -o $INET_IFACE -j udp_outbound
    $IPT -A OUTPUT -p ALL -o $INET_IFACE -j $OTHER_OUTBOUND
fi

if [ "$LOCAL_IFACE" != "" ]; then
    $IPT -A OUTPUT -p TCP -o $LOCAL_IFACE -j tcp_outbound
    $IPT -A OUTPUT -p UDP -o $LOCAL_IFACE -j udp_outbound
    $IPT -A OUTPUT -p ALL -o $LOCAL_IFACE -j $OTHER_OUTBOUND
    $IPT -A OUTPUT -p ALL -s $LOCAL_IP -j $OTHER_OUTBOUND
fi

# Log packets that still don't match
if [ "$LOG_DROPS" = "true" ]; then
    $IPT -A OUTPUT -m limit --limit 3/minute --limit-burst 3 -j LOG --log-prefix "OUTPUT packet died: "
fi

###############################################################################
#
# POSTROUTING chain
#

if [ "$GATEWAY" = "true" ]; then
    echo "Process POSTROUTING chain ..."

    # Enable masquerade on internet interface
    $IPT -t nat -A POSTROUTING -o $INET_IFACE -j MASQUERADE
fi

###############################################################################
#
# Final steps
#

if [ "$DOCKER_NET" != "" ]; then
    echo "Restarting docker service ..."
    $DOCKER_RESTART
fi

echo "Done! Firewall enabled."
